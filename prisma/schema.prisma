// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
   id    String  @id @default(cuid())
   email  String    @unique
   password   String
   firstName   String
   lastName    String
   wallet      Wallet?
   transacrions   Transaction[]  @relation("UserTransacions")
   auditLogs     AuditLog[]
   createdAt     DateTime      @default(now())
   updatedAt      DateTime      @updatedAt
}


model Wallet {
  id        String     @id @default(cuid())
  userId    String     @unique
  balance    Decimal   @default(0.0)
  currency   Currency  @default(USD)
  walletRef  String    @unique
  user        User     @relation(fields: [userId],references: [id])
  transaction   Transaction[]   @relation("WalletTransactions")
  ledgers       Ledger[]
  createdAt     DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Transaction {
  id       String     @id @default(cuid())
  walletId    String
  userId      String
  type        TransactionType
  status      TransactionStatus   @default(PENDING)
  amount      Decimal
  reference   String     @unique
  description    String?
  metadata       Json
  wallet         Wallet     @relation("WalletTransactions",fields: [walletId],references: [id])
  user           User       @relation("UserTransacions",fields: [userId],references: [id])
  ledger         Ledger?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}


model Ledger {
  id     String   @id  @default(cuid())
  walletId      String
  transactionId    String   @unique
  change    Decimal
  balanceBefore   Decimal
  balanceAfter     Decimal
  wallet         Wallet     @relation(fields: [walletId],references: [id])
  transaction    Transaction    @relation(fields: [transactionId],references: [id])
  createdAt      DateTime      @default(now())
}

model AuditLog {
  id    String   @id @default(cuid())
  userId    String
  action    String
  ipAddress String?
  details   Json?
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}


enum Currency {
  USD
  EUR
  NGN
  GBP
  CAD
  INR
}

enum TransactionType {
  FUND
  TRANSFER 
  WITHDRAW
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}